// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "countservice.proto" (package "foocompany.template", syntax proto3)
// tslint:disable
//
// follow https://github.com/twitchtv/twirp/blob/main/docs/best_practices.md
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Counter } from "./countservice";
import type { IncrementRequest } from "./countservice";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CounterValue } from "./countservice";
import type { CounterRequest } from "./countservice";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service foocompany.template.Counter
 */
export interface ICounterClient {
    /**
     * @generated from protobuf rpc: GetValue(foocompany.template.CounterRequest) returns (foocompany.template.CounterValue);
     */
    getValue(input: CounterRequest, options?: RpcOptions): UnaryCall<CounterRequest, CounterValue>;
    /**
     * @generated from protobuf rpc: Increment(foocompany.template.IncrementRequest) returns (foocompany.template.CounterValue);
     */
    increment(input: IncrementRequest, options?: RpcOptions): UnaryCall<IncrementRequest, CounterValue>;
}
/**
 * @generated from protobuf service foocompany.template.Counter
 */
export class CounterClient implements ICounterClient, ServiceInfo {
    typeName = Counter.typeName;
    methods = Counter.methods;
    options = Counter.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetValue(foocompany.template.CounterRequest) returns (foocompany.template.CounterValue);
     */
    getValue(input: CounterRequest, options?: RpcOptions): UnaryCall<CounterRequest, CounterValue> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CounterRequest, CounterValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Increment(foocompany.template.IncrementRequest) returns (foocompany.template.CounterValue);
     */
    increment(input: IncrementRequest, options?: RpcOptions): UnaryCall<IncrementRequest, CounterValue> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<IncrementRequest, CounterValue>("unary", this._transport, method, opt, input);
    }
}
